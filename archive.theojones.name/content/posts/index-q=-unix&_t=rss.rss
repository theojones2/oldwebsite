<?xml version="1.0"?>
<rss version="2.0" xmlns:g="http://base.google.com/ns/1.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd">
  <channel>
    <title>Theo Jones</title>
    <description><![CDATA[Thoughts and Ideas]]></description>
    <itunes:summary><![CDATA[Thoughts and Ideas]]></itunes:summary>
    <link>http://www.theojones.name/content/posts/?q=%23unix</link>
    <atom:link href="http://withknown.superfeedr.com/" rel="hub"/>
    <atom:link href="http://www.theojones.name/content/posts/?q=%23unix&amp;_t=rss" rel="self" type="application/rss+xml"/>
    <generator>Known https://withknown.com</generator>
    <item>
      <title>On reducing blogging engine bloat.</title>
      <link>http://www.theojones.name/2015/on-reducing-blogging-engine-bloat</link>
      <guid>http://www.theojones.name/2015/on-reducing-blogging-engine-bloat</guid>
      <pubDate>Sat, 30 May 2015 07:05:50 +0000</pubDate>
      <author>Theo Jones</author>
      <description><![CDATA[<div>
        
<p>I've switched between blogging engines a few times for this site (there are still some broken links and images from the transition). WordPress, what I'm on now, has a good bit of bloat. Simpler blogging engines, like Ghost, go too far in the other direction, and lack critical features.  I haven't been able to find a blogging engine that hits a good in-between. Personally, I feel that the way to hit that in-between in modularity.  The old UNIX Philosophy of "do one thing and do it well". Plugins are how modularity should be reached. Create a simple core blogging engine (the functionality level of Ghost would be a good target) and add the rest as optional plugins. Now, you might note that WordPress plugins often add a lot of bugs, have a lot of security holes, and are often written by people who don't know what they are doing. And you would be right. However, there is no reason why such plugins can't be maintained in the same source tree as the core software with the help of actual developers. Just put any frequently used plugin in the tree as an officially supported feature set. A user can also easily swap out the official implementation of a feature with an alternative.   This would provide the perfect mix of flexibility and simplicity.  It would allow more officially supported features but users who don't want a feature don't have to put up with the BS that comes with it.  This is a rough analogue of the development method of the classical UNIXes and the BSDs.</p>
<p><a href="http://www.theojones.name/tag/blogging" class="p-category" rel="tag">#blogging</a> <a href="http://www.theojones.name/tag/ghost" class="p-category" rel="tag">#ghost</a> <a href="http://www.theojones.name/tag/uncategorized" class="p-category" rel="tag">#uncategorized</a> <a href="http://www.theojones.name/tag/unix" class="p-category" rel="tag">#unix</a> <a href="http://www.theojones.name/tag/unixphilosophy" class="p-category" rel="tag">#unixphilosophy</a> <a href="http://www.theojones.name/tag/wordpress" class="p-category" rel="tag">#wordpress</a></p></div>]]></description>
      <category>#blogging</category>
      <category>#ghost</category>
      <category>#uncategorized</category>
      <category>#unix</category>
      <category>#unixphilosophy</category>
      <category>#wordpress</category>
    </item>
    <item>
      <title>I Don't Use Word Processors</title>
      <link>http://www.theojones.name/2014/i-dont-use-word-processors</link>
      <guid>http://www.theojones.name/2014/i-dont-use-word-processors</guid>
      <pubDate>Mon, 28 Jul 2014 20:24:09 +0000</pubDate>
      <author>Theo Jones</author>
      <description><![CDATA[<div>
        <p>I don't use standard WYSIWYG type word processors when it is possible to avoid them. Instead I use typesetting systems like LATEX for long documents, and plain ANSI text for shorter documents. This has three huge benefits </p><p>1) Separation between layout and content. With a typesetting program, you just write the text and the program takes care of formatting it. <br />
2)Follows the UNIX philosophy. The LATEX + Typesetting system closely follows the core rule of the UNIX philosophy "<em>This is the Unix philosophy: Write programs that do one thing and do it well. Write programs to work together. Write programs to handle text streams, because that is a universal interface.</em>" The core of TEX is extremely small and the entire LATEX system is formed out of a set of small scripts that are built upon this. The system is extremely modular and flexible. These programs are driven by the command line. While it is impossible to use a command driven system without first learining it, it gives vast power to the user <br />
3)Flexibility. Due to the modular and flexible nature of LATEX the system can do almost anything. Want to properly format math equations? Sure.  Want to create a circut diagram? There is a package for that? Want to format a book so it is ready to go for Amazon's CreateSpace system?<a href="https://github.com/aginiewicz/createspace"> A package just for that</a> is ready to go. I could name many other examples. This is only made possible by the code driven modular nature of a typesetting type system. <br />
4) Plain text is the universal system. Almost every operating system written since the 70s can edit and view plain text files. LATEX is just a plain text file of markup code.So, anything could view a document written in LATEX. Try that with Libreoffice or MS Word. </p><p>The following article is written by someone with a similar opinion to me on this. It mostly focuses on the layout versus content issue. <br /><a href="http://ricardo.ecn.wfu.edu/~cottrell/wp.html"></a><a href="http://ricardo.ecn.wfu.edu/~cottrell/wp.html">http:/<wbr></wbr>/<wbr></wbr>ricardo.ecn.wfu.edu/<wbr></wbr>~cottrell/<wbr></wbr>wp.html</a></p><p><a href="http://www.theojones.name/tag/ansi" class="p-category" rel="tag">#ansi</a> <a href="http://www.theojones.name/tag/latex" class="p-category" rel="tag">#latex</a> <a href="http://www.theojones.name/tag/old" class="p-category" rel="tag">#old</a> <a href="http://www.theojones.name/tag/old" class="p-category" rel="tag">#old</a> <a href="http://www.theojones.name/tag/uncategorized" class="p-category" rel="tag">#uncategorized</a> <a href="http://www.theojones.name/tag/unix" class="p-category" rel="tag">#unix</a> <a href="http://www.theojones.name/tag/wysiwyg" class="p-category" rel="tag">#wysiwyg</a></p></div>]]></description>
      <category>#ansi</category>
      <category>#latex</category>
      <category>#old</category>
      <category>#old</category>
      <category>#uncategorized</category>
      <category>#unix</category>
      <category>#wysiwyg</category>
    </item>
    <item>
      <title>Mac Bashing</title>
      <link>http://www.theojones.name/2014/mac-bashing</link>
      <guid>http://www.theojones.name/2014/mac-bashing</guid>
      <pubDate>Thu, 13 Feb 2014 20:52:47 +0000</pubDate>
      <author>Theo Jones</author>
      <description><![CDATA[<div>
        
<p>It turns out that I have to use a piece of software that works best on a Mac. Time for a rant. Lets stroll over to Apple's <a href="http://www.apple.com/macbook-pro/performance-retina/">reasons to buy a Macbook</a> and start with the category that prompted today's flamage.<a href="http://www.theojones.name/wp-content/uploads/2015/07/appel-why-you-no-make-gaming-computer_o_1118168.jpg"><img class="alignright size-medium wp-image-2693" src="http://www.theojones.name/wp-content/uploads/2015/07/appel-why-you-no-make-gaming-computer_o_1118168-300x226.jpg" alt="appel-why-you-no-make-gaming-computer_o_1118168" width="300" height="226"></a></p>
<blockquote><h3>Science and Engineering</h3></blockquote>
<p>The reason why a simple GIS program completely flatted the crap hardware in a room full of Macbooks during one of my classes, while still somehow not leaving me on my Linux box guessing which fuzzy blur is supposed to be a medial morane, or the reason why my physics professor went on a rant about the b0rked output that Apple's word processor produces must be that Macs are so great at dealing with scientific data.</p>
<blockquote>
<p>From 3D molecular modeling and DNA imaging .... MacBook Pro lets you do things that once were possible only on a desktop computer</p>
</blockquote>
<p>Ah yes DNA imaging on a Mac, the garbage that inspired today’s rant. Watch that bioinformatics software crawl, watch it wither, watch it crash. Now lets go on to Apple's description of their</p>
<!--more--><blockquote>
<p>And now it’s even faster with the latest-generation Intel processors, high-performance graphics....</p>
</blockquote>
<p>That "high-performance graphics" is going to cost you.</p>
<blockquote>
<p>PCIe-based flash storage</p>
</blockquote>
<p>Apple is nice enough to use a hard drive type that is incompatible with every other laptop on the market. This helps them charge you the special Mac user price on your upgrades. Oh, and don't forget the soldered RAM that is not replaceable by the user. Some things haven't changed since the days of the old Macs that I remember using in elementary school.</p>

<p>[caption id="attachment_1003" align="aligncenter" width="480"]<a href="http://cexx.org/snicker/macpix.htm"></a> Except for the monitor this is still as true now as it was in 1998. Via <a href="http://cexx.org"></a><a href="http://cexx.org">http:/<wbr></wbr>/<wbr></wbr>cexx.org</a>]</p>

<p>Now lets visit the <a href="http://www.apple.com/osx/">Mac OS X page</a></p>
<blockquote>
<p>OS X is the operating system that powers every Mac. Built on a rock-solid UNIX foundation</p>
</blockquote>
<p>As far as I can tell the "UNIX foundation" in OS X consists of two things</p>
<ol><li>Buying the rights to the UNIX trademark so Apple can call their crappy bloatware OS UNIX</li>
    <li>Copying and pasting a bunch of code from operating systems that <em>actually</em> have a "rock-solid UNIX foundation" like Linux and BSD</li>
</ol>
<p>Apple doesn't obey the fundamental rules that guide the design of <em>real</em> UNIXes. These principles are famously summed up by Doug McIlroy as follows "This is the Unix philosophy: Write programs that do one thing and do it well. Write programs to work together. Write programs to handle text streams, because that is a universal interface."</p>

<p>Instead of writing programs that do one thing and do it well, Apple prefers to write bloatware that does many things but none of it well. Instead of writing programs to work together and use text for input and output, Apple writes programs that output weird proprietary file formats, and that refuse to work with command line interfaces.</p>
<blockquote>
<p> it’s engineered to take full advantage of what the hardware is capable of.</p>
</blockquote>
<p>Hmm. Mac OS more seems built to burn through the RAM and run slow.</p>
<blockquote>
<p>And it’s designed to deliver the most intuitive and integrated computer experience in the world.</p>
</blockquote>
<p>I wonder if Apple should design their user interfaces in a way that actually allows people to get real work done instead of nerfing their OS into an "intuitive" environment for lusers who refuse to learn how their computer actually works.</p>
<blockquote>
<p>If you already use an iPhone or iPad, a Mac will feel instantly familiar.</p>
</blockquote>
<p>Sure. But I use my Ipad as an appliance for web browsing and other simple tasks. However, I expect to get real work done on my laptop.</p>
<p><a href="http://www.theojones.name/tag/dna" class="p-category" rel="tag">#dna</a> <a href="http://www.theojones.name/tag/old" class="p-category" rel="tag">#old</a> <a href="http://www.theojones.name/tag/old" class="p-category" rel="tag">#old</a> <a href="http://www.theojones.name/tag/os" class="p-category" rel="tag">#os</a> <a href="http://www.theojones.name/tag/ram" class="p-category" rel="tag">#ram</a> <a href="http://www.theojones.name/tag/uncategorized" class="p-category" rel="tag">#uncategorized</a> <a href="http://www.theojones.name/tag/unix" class="p-category" rel="tag">#unix</a></p></div>]]></description>
      <category>#dna</category>
      <category>#old</category>
      <category>#old</category>
      <category>#os</category>
      <category>#ram</category>
      <category>#uncategorized</category>
      <category>#unix</category>
    </item>
  </channel>
</rss>
